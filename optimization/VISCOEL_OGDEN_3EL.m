function [STATEVEND, STRESS, DDSDDE, FIRSTPIOLA, exitflag] = VISCOEL_OGDEN(DFGRD0,...
    DFGRD1, STATEV, DTIME, ...
    MU, ALPHA, KELAS, ...
    MUVIS, ALPHAVIS, KVIS, ETADEV, ETAVOL, ...
    MUVIS_2, ALPHAVIS_2, KVIS_2, ETADEV_2, ETAVOL_2, ...
    MUVIS_3, ALPHAVIS_3, KVIS_3, ETADEV_3, ETAVOL_3)
EPS = 1E-10;
ONE = 1.0; TWO = 2.0; THREE = 3.0; FOUR = 4.0; SIX = 6.0; NINE = 9.0; 
BeOLD = zeros(3);
DEVTAU = zeros(3,1);
RESVEC = zeros(3,1);
DDEVTAUDEPSe = zeros(3);
KMAT = zeros(3);
Be = zeros(3);
TAUNEQ = zeros(3);
L4NEQ = zeros(3,3,3,3);
C4NEQ = zeros(3,3,3,3);
C4NEQJ = zeros(3,3,3,3);
CNEQ = zeros(6);
PVTAUEQ = zeros(3,1);
SIGMAEQ = zeros(3);
CAB = zeros(3);
GAB = zeros(3);
C4EQMAT = zeros(3,3,3,3);
C4EQ = zeros(3,3,3,3);
C4EQJ = zeros(3,3,3,3);
CEQ = zeros(6);
STRESS = zeros(6,1);
DDSDDE = zeros(6);
FIRSTPIOLA = zeros(3);
IDT2 = eye(3);

exitflag = 0;

% SECOND NON-EQULLIBRIUM ELEMENT
BeOLD_2 = zeros(3);
DEVTAU_2 = zeros(3,1);
RESVEC_2 = zeros(3,1);
DDEVTAUDEPSe_2 = zeros(3);
KMAT_2 = zeros(3);
Be_2 = zeros(3);
TAUNEQ_2 = zeros(3);
L4NEQ_2 = zeros(3,3,3,3);
C4NEQ_2 = zeros(3,3,3,3);
C4NEQJ_2 = zeros(3,3,3,3);

% THIRD NON-EQULLIBRIUM ELEMENT
BeOLD_3 = zeros(3);
DEVTAU_3 = zeros(3,1);
RESVEC_3 = zeros(3,1);
DDEVTAUDEPSe_3 = zeros(3);
KMAT_3 = zeros(3);
Be_3 = zeros(3);
TAUNEQ_3 = zeros(3);
L4NEQ_3 = zeros(3,3,3,3);
C4NEQ_3 = zeros(3,3,3,3);
C4NEQJ_3 = zeros(3,3,3,3);


BeOLD(1,1) = STATEV(1);
BeOLD(1,2) = STATEV(4);
BeOLD(1,3) = STATEV(5);
BeOLD(2,1) = STATEV(4);
BeOLD(2,2) = STATEV(2);
BeOLD(2,3) = STATEV(6);
BeOLD(3,1) = STATEV(5);
BeOLD(3,2) = STATEV(6);
BeOLD(3,3) = STATEV(3);

BeOLD_2(1,1) = STATEV(7);
BeOLD_2(1,2) = STATEV(10);
BeOLD_2(1,3) = STATEV(11);
BeOLD_2(2,1) = STATEV(10);
BeOLD_2(2,2) = STATEV(8);
BeOLD_2(2,3) = STATEV(12);
BeOLD_2(3,1) = STATEV(11);
BeOLD_2(3,2) = STATEV(12);
BeOLD_2(3,3) = STATEV(9);


BeOLD_3(1,1) = STATEV(13);
BeOLD_3(1,2) = STATEV(16);
BeOLD_3(1,3) = STATEV(17);
BeOLD_3(2,1) = STATEV(16);
BeOLD_3(2,2) = STATEV(14);
BeOLD_3(2,3) = STATEV(18);
BeOLD_3(3,1) = STATEV(17);
BeOLD_3(3,2) = STATEV(18);
BeOLD_3(3,3) = STATEV(15);

DET = DFGRD1(1,1)*DFGRD1(2,2)*DFGRD1(3,3) ...
      -DFGRD1(1,2)*DFGRD1(2,1)*DFGRD1(3,3) ...
      +DFGRD1(1,2)*DFGRD1(2,3)*DFGRD1(3,1) ...
      +DFGRD1(1,3)*DFGRD1(3,2)*DFGRD1(2,1) ...
      -DFGRD1(1,3)*DFGRD1(3,1)*DFGRD1(2,2) ... 
      -DFGRD1(2,3)*DFGRD1(3,2)*DFGRD1(1,1);

BeOLDINV = inv(BeOLD);
CiOLD = transpose(DFGRD0) * BeOLDINV * DFGRD0;
CiOLDINV = inv(CiOLD);
BeTR = DFGRD1 * CiOLDINV * transpose(DFGRD1);
PVBeTR = eig(BeTR);
[PDBeTR, ~] = eig(BeTR);
EPSeTR = ONE/TWO * log(PVBeTR);
PVBe = PVBeTR;
EPSe = EPSeTR;

for ITER = 1:200
    Je = (PVBe(1)*PVBe(2)*PVBe(3))^(ONE/TWO);
    PVBeBAR = Je^(-TWO/THREE) * PVBe;
    DEVTAU(1) = MUVIS * ((TWO/THREE)*(PVBeBAR(1)^(ALPHAVIS/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR(2)^(ALPHAVIS/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR(3)^(ALPHAVIS/TWO)));
    DEVTAU(2) = MUVIS * ((TWO/THREE)*(PVBeBAR(2)^(ALPHAVIS/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR(3)^(ALPHAVIS/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR(1)^(ALPHAVIS/TWO)));
    DEVTAU(3) = MUVIS * ((TWO/THREE)*(PVBeBAR(3)^(ALPHAVIS/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR(1)^(ALPHAVIS/TWO))...
                        -(ONE/THREE)*(PVBeBAR(2)^(ALPHAVIS/TWO)));
    for N = 1:3
        RESVEC(N) = EPSe(N) - EPSeTR(N) + DTIME(1) * (ONE/(TWO*ETADEV)*DEVTAU(N) ...
                  + KVIS/(SIX*ETAVOL)*(Je*Je-ONE));
    end
    if abs(norm(RESVEC)) < EPS
        break
    end
    DDEVTAUDEPSe(1,1) = MUVIS * ALPHAVIS ...
                         *((FOUR/NINE)*(PVBeBAR(1)^(ALPHAVIS/TWO))...
                           +(ONE/NINE)*(PVBeBAR(2)^(ALPHAVIS/TWO)...
                                       +PVBeBAR(3)^(ALPHAVIS/TWO))); 
    DDEVTAUDEPSe(2,2) = MUVIS * ALPHAVIS  ...
                       *((FOUR/NINE)*(PVBeBAR(2)^(ALPHAVIS/TWO)) ...
                         +(ONE/NINE)*(PVBeBAR(3)^(ALPHAVIS/TWO) ...
                                     +PVBeBAR(1)^(ALPHAVIS/TWO))); 
    DDEVTAUDEPSe(3,3) = MUVIS * ALPHAVIS  ...
                     *((FOUR/NINE)*(PVBeBAR(3)^(ALPHAVIS/TWO)) ...
                       +(ONE/NINE)*(PVBeBAR(1)^(ALPHAVIS/TWO) ...
                                   +PVBeBAR(2)^(ALPHAVIS/TWO)));
    DDEVTAUDEPSe(1,2) = MUVIS * ALPHAVIS  ...
                     *((-TWO/NINE)*(PVBeBAR(1)^(ALPHAVIS/TWO) ...
                                   +PVBeBAR(2)^(ALPHAVIS/TWO)) ...
                       +(ONE/NINE)*(PVBeBAR(3)^(ALPHAVIS/TWO)));
    DDEVTAUDEPSe(1,3) = MUVIS * ALPHAVIS  ...
                      *((-TWO/NINE)*(PVBeBAR(1)^(ALPHAVIS/TWO) ...
                                    +PVBeBAR(3)^(ALPHAVIS/TWO)) ...
                        +(ONE/NINE)*(PVBeBAR(2)^(ALPHAVIS/TWO)));
    DDEVTAUDEPSe(2,3) = MUVIS * ALPHAVIS  ...
                     *((-TWO/NINE)*(PVBeBAR(2)^(ALPHAVIS/TWO) ...
                                   +PVBeBAR(3)^(ALPHAVIS/TWO)) ...
                       +(ONE/NINE)*(PVBeBAR(1)^(ALPHAVIS/TWO)));
    DDEVTAUDEPSe(2,1) = DDEVTAUDEPSe(1,2);
    DDEVTAUDEPSe(3,1) = DDEVTAUDEPSe(1,3);
    DDEVTAUDEPSe(3,2) = DDEVTAUDEPSe(2,3);
    for I = 1:3
        for J = 1:3
            KMAT(I,J) = IDT2(I,J) + DTIME(1) * ((ONE/(TWO*ETADEV))*DDEVTAUDEPSe(I,J) ...
                      -(ONE/(THREE*ETAVOL)*KVIS*Je*Je));
        end 
    end
    KINV = inv(KMAT);
    DELEPSe = - KINV * RESVEC;
    EPSe = EPSe + DELEPSe;
    PVBe = exp(TWO*EPSe);
end
for I=1:3
    for J=1:3
            Be(J,I)=PVBe(1)*PDBeTR(J,1)*PDBeTR(I,1) ...
                   +PVBe(2)*PDBeTR(J,2)*PDBeTR(I,2) ...
                   +PVBe(3)*PDBeTR(J,3)*PDBeTR(I,3);
    end 
end
PVTAU = DEVTAU + KVIS/TWO * (Je*Je-1);
PDTAU = PDBeTR;

for I=1:3
    for J=1:3
          TAUNEQ(J,I)=PVTAU(1)*PDTAU(J,1)*PDTAU(I,1) ...
                     +PVTAU(2)*PDTAU(J,2)*PDTAU(I,2) ...
                     +PVTAU(3)*PDTAU(J,3)*PDTAU(I,3);
    end
end
DPVTAUDEPSe = DDEVTAUDEPSe + KVIS * Je * Je;
CALG = DPVTAUDEPSe * KINV;
STATEV(1) = Be(1,1);
STATEV(2) = Be(2,2);
STATEV(3) = Be(3,3);
STATEV(4) = Be(1,2);
STATEV(5) = Be(1,3);
STATEV(6) = Be(2,3);
SIGMANEQ = TAUNEQ / DET;
for J=1:3
    for K=1:3
          L4NEQ(J,J,K,K) = (CALG(J,K) - PVTAU(J)*TWO*IDT2(J,K)) ...
                           /(PVBeTR(J)*PVBeTR(K));
    end
end
for J=1:3
    for K=1:3
        if J == K 
            continue
        end
        if (abs(PVBeTR(J)-PVBeTR(K)) < EPS)
            L4NEQ(J,K,J,K) = (L4NEQ(J,J,J,J)-L4NEQ(J,J,K,K))/TWO;
        else
            L4NEQ(J,K,J,K) = ((PVTAU(K)/PVBeTR(K))-(PVTAU(J)/PVBeTR(J))) ...
                             /(PVBeTR(K)-PVBeTR(J));
        end
          L4NEQ(J,K,K,J) = L4NEQ(J,K,J,K);
    end
end

for J=1:3
    for K=1:3
        for L=1:3
            for M=1:3 
            C4NEQ(J,K,L,M) = 1 * ...
            L4NEQ(1,1,1,1)*PVBeTR(1)*PVBeTR(1) ...
                          *PDBeTR(J,1)*PDBeTR(K,1) ...
                          *PDBeTR(L,1)*PDBeTR(M,1) ...
           +L4NEQ(1,1,2,2)*PVBeTR(1)*PVBeTR(2) ...
                          *PDBeTR(J,1)*PDBeTR(K,1) ...
                          *PDBeTR(L,2)*PDBeTR(M,2) ...
           +L4NEQ(1,1,3,3)*PVBeTR(1)*PVBeTR(3) ...
                          *PDBeTR(J,1)*PDBeTR(K,1) ...
                          *PDBeTR(L,3)*PDBeTR(M,3) ...
           +L4NEQ(2,2,1,1)*PVBeTR(2)*PVBeTR(1) ...
                          *PDBeTR(J,2)*PDBeTR(K,2) ...
                          *PDBeTR(L,1)*PDBeTR(M,1) ...
           +L4NEQ(2,2,2,2)*PVBeTR(2)*PVBeTR(2) ...
                          *PDBeTR(J,2)*PDBeTR(K,2) ...
                          *PDBeTR(L,2)*PDBeTR(M,2) ...
           +L4NEQ(2,2,3,3)*PVBeTR(2)*PVBeTR(3) ...
                          *PDBeTR(J,2)*PDBeTR(K,2) ...
                          *PDBeTR(L,3)*PDBeTR(M,3) ...
           +L4NEQ(3,3,1,1)*PVBeTR(3)*PVBeTR(1) ...
                          *PDBeTR(J,3)*PDBeTR(K,3) ...
                          *PDBeTR(L,1)*PDBeTR(M,1) ...
           +L4NEQ(3,3,2,2)*PVBeTR(3)*PVBeTR(2) ...
                          *PDBeTR(J,3)*PDBeTR(K,3) ...
                          *PDBeTR(L,2)*PDBeTR(M,2) ...
           +L4NEQ(3,3,3,3)*PVBeTR(3)*PVBeTR(3) ...
                          *PDBeTR(J,3)*PDBeTR(K,3) ...
                          *PDBeTR(L,3)*PDBeTR(M,3) ...
           +L4NEQ(1,2,1,2)*PVBeTR(1)*PVBeTR(2) ...
                          *PDBeTR(J,1)*PDBeTR(K,2) ...
                          *PDBeTR(L,1)*PDBeTR(M,2) ...
           +L4NEQ(1,2,2,1)*PVBeTR(1)*PVBeTR(2) ...
                          *PDBeTR(J,1)*PDBeTR(K,2) ...
                          *PDBeTR(L,2)*PDBeTR(M,1) ...
           +L4NEQ(1,3,1,3)*PVBeTR(1)*PVBeTR(3) ...
                          *PDBeTR(J,1)*PDBeTR(K,3) ...
                          *PDBeTR(L,1)*PDBeTR(M,3) ...
           +L4NEQ(1,3,3,1)*PVBeTR(1)*PVBeTR(3) ...
                          *PDBeTR(J,1)*PDBeTR(K,3) ...
                          *PDBeTR(L,3)*PDBeTR(M,1) ...
           +L4NEQ(2,1,2,1)*PVBeTR(2)*PVBeTR(1) ...
                          *PDBeTR(J,2)*PDBeTR(K,1) ...
                          *PDBeTR(L,2)*PDBeTR(M,1) ...
           +L4NEQ(2,1,1,2)*PVBeTR(2)*PVBeTR(1) ...
                          *PDBeTR(J,2)*PDBeTR(K,1) ...
                          *PDBeTR(L,1)*PDBeTR(M,2) ...
           +L4NEQ(2,3,2,3)*PVBeTR(2)*PVBeTR(3) ...
                          *PDBeTR(J,2)*PDBeTR(K,3) ...
                          *PDBeTR(L,2)*PDBeTR(M,3) ...
           +L4NEQ(2,3,3,2)*PVBeTR(2)*PVBeTR(3) ...
                          *PDBeTR(J,2)*PDBeTR(K,3) ...
                          *PDBeTR(L,3)*PDBeTR(M,2) ...
           +L4NEQ(3,1,3,1)*PVBeTR(3)*PVBeTR(1) ...
                          *PDBeTR(J,3)*PDBeTR(K,1) ...
                          *PDBeTR(L,3)*PDBeTR(M,1) ...
           +L4NEQ(3,1,1,3)*PVBeTR(3)*PVBeTR(1) ...
                          *PDBeTR(J,3)*PDBeTR(K,1) ...
                          *PDBeTR(L,1)*PDBeTR(M,3) ...
           +L4NEQ(3,2,3,2)*PVBeTR(3)*PVBeTR(2) ...
                          *PDBeTR(J,3)*PDBeTR(K,2) ...
                          *PDBeTR(L,3)*PDBeTR(M,2) ...
           +L4NEQ(3,2,2,3)*PVBeTR(3)*PVBeTR(2) ...
                          *PDBeTR(J,3)*PDBeTR(K,2) ...
                          *PDBeTR(L,2)*PDBeTR(M,3);
            end
        end
    end
end

for I=1:3
    for J=1:3
        for K=1:3
            for L=1:3
              C4NEQJ(I,J,K,L) = C4NEQ(I,J,K,L)/DET ...
                               +(IDT2(I,K)*TAUNEQ(J,L) ...
                               +IDT2(I,L)*TAUNEQ(J,K) ...
                               +IDT2(J,K)*TAUNEQ(I,L) ...
                               +IDT2(J,L)*TAUNEQ(I,K))/(TWO*DET); 
            end
        end
    end
end

% Second Viscous Element
BeOLDINV_2 = inv(BeOLD_2);
CiOLD_2 = transpose(DFGRD0) * BeOLDINV_2 * DFGRD0;
CiOLDINV_2 = inv(CiOLD_2);
BeTR_2 = DFGRD1 * CiOLDINV_2 * transpose(DFGRD1);
PVBeTR_2 = eig(BeTR_2);
[PDBeTR_2, ~] = eig(BeTR_2);
EPSeTR_2 = ONE/TWO * log(PVBeTR_2);
PVBe_2 = PVBeTR_2;
EPSe_2 = EPSeTR_2;

for ITER = 1:200
    Je_2 = (PVBe_2(1)*PVBe_2(2)*PVBe_2(3))^(ONE/TWO);
    PVBeBAR_2 = Je_2^(-TWO/THREE) * PVBe_2;
    DEVTAU_2(1) = MUVIS_2 * ((TWO/THREE)*(PVBeBAR_2(1)^(ALPHAVIS_2/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR_2(2)^(ALPHAVIS_2/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR_2(3)^(ALPHAVIS_2/TWO)));
    DEVTAU_2(2) = MUVIS_2 * ((TWO/THREE)*(PVBeBAR_2(2)^(ALPHAVIS_2/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR_2(3)^(ALPHAVIS_2/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR_2(1)^(ALPHAVIS_2/TWO)));
    DEVTAU_2(3) = MUVIS_2 * ((TWO/THREE)*(PVBeBAR_2(3)^(ALPHAVIS_2/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR_2(1)^(ALPHAVIS_2/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR_2(2)^(ALPHAVIS_2/TWO)));
    for N = 1:3
        RESVEC_2(N) = EPSe_2(N) - EPSeTR_2(N) + DTIME(1) * (ONE/(TWO*ETADEV_2)*DEVTAU_2(N) ...
                  + KVIS_2/(SIX*ETAVOL_2)*(Je_2*Je_2-ONE));
    end
    if abs(norm(RESVEC_2)) < EPS
        break
    end
    DDEVTAUDEPSe_2(1,1) = MUVIS_2 * ALPHAVIS_2 ...
                         *((FOUR/NINE)*(PVBeBAR_2(1)^(ALPHAVIS_2/TWO))...
                           +(ONE/NINE)*(PVBeBAR_2(2)^(ALPHAVIS_2/TWO)...
                                       +PVBeBAR_2(3)^(ALPHAVIS_2/TWO))); 
    DDEVTAUDEPSe_2(2,2) = MUVIS_2 * ALPHAVIS_2  ...
                       *((FOUR/NINE)*(PVBeBAR_2(2)^(ALPHAVIS_2/TWO)) ...
                         +(ONE/NINE)*(PVBeBAR_2(3)^(ALPHAVIS_2/TWO) ...
                                     +PVBeBAR_2(1)^(ALPHAVIS_2/TWO))); 
    DDEVTAUDEPSe_2(3,3) = MUVIS_2 * ALPHAVIS_2  ...
                     *((FOUR/NINE)*(PVBeBAR_2(3)^(ALPHAVIS_2/TWO)) ...
                       +(ONE/NINE)*(PVBeBAR_2(1)^(ALPHAVIS_2/TWO) ...
                                   +PVBeBAR_2(2)^(ALPHAVIS_2/TWO)));
    DDEVTAUDEPSe_2(1,2) = MUVIS_2 * ALPHAVIS_2  ...
                     *((-TWO/NINE)*(PVBeBAR_2(1)^(ALPHAVIS_2/TWO) ...
                                   +PVBeBAR_2(2)^(ALPHAVIS_2/TWO)) ...
                       +(ONE/NINE)*(PVBeBAR_2(3)^(ALPHAVIS_2/TWO)));
    DDEVTAUDEPSe_2(1,3) = MUVIS_2 * ALPHAVIS_2  ...
                      *((-TWO/NINE)*(PVBeBAR_2(1)^(ALPHAVIS_2/TWO) ...
                                    +PVBeBAR_2(3)^(ALPHAVIS_2/TWO)) ...
                        +(ONE/NINE)*(PVBeBAR_2(2)^(ALPHAVIS_2/TWO)));
    DDEVTAUDEPSe_2(2,3) = MUVIS_2 * ALPHAVIS_2  ...
                     *((-TWO/NINE)*(PVBeBAR_2(2)^(ALPHAVIS_2/TWO) ...
                                   +PVBeBAR_2(3)^(ALPHAVIS_2/TWO)) ...
                       +(ONE/NINE)*(PVBeBAR_2(1)^(ALPHAVIS_2/TWO)));
    DDEVTAUDEPSe_2(2,1) = DDEVTAUDEPSe_2(1,2);
    DDEVTAUDEPSe_2(3,1) = DDEVTAUDEPSe_2(1,3);
    DDEVTAUDEPSe_2(3,2) = DDEVTAUDEPSe_2(2,3);
    for I = 1:3
        for J = 1:3
            KMAT_2(I,J) = IDT2(I,J) + DTIME(1) * ((ONE/(TWO*ETADEV_2))*DDEVTAUDEPSe_2(I,J) ...
                      -(ONE/(THREE*ETAVOL_2)*KVIS_2*Je_2*Je_2));
        end 
    end
    KINV_2 = inv(KMAT_2);
    DELEPSe_2 = - KINV_2 * RESVEC_2;
    EPSe_2 = EPSe_2 + DELEPSe_2;
    PVBe_2 = exp(TWO*EPSe_2);
end
for I=1:3
    for J=1:3
            Be_2(J,I)=PVBe_2(1)*PDBeTR_2(J,1)*PDBeTR_2(I,1) ...
                   +PVBe_2(2)*PDBeTR_2(J,2)*PDBeTR_2(I,2) ...
                   +PVBe_2(3)*PDBeTR_2(J,3)*PDBeTR_2(I,3);
    end 
end
PVTAU_2 = DEVTAU_2 + KVIS_2/TWO * (Je_2*Je_2-1);
PDTAU_2 = PDBeTR_2;

for I=1:3
    for J=1:3
          TAUNEQ_2(J,I)=PVTAU_2(1)*PDTAU_2(J,1)*PDTAU_2(I,1) ...
                     +PVTAU_2(2)*PDTAU_2(J,2)*PDTAU_2(I,2) ...
                     +PVTAU_2(3)*PDTAU_2(J,3)*PDTAU_2(I,3);
    end
end
DPVTAUDEPSe_2 = DDEVTAUDEPSe_2 + KVIS_2 * Je_2 * Je_2;
CALG_2 = DPVTAUDEPSe_2 * KINV_2;
STATEV(7) = Be_2(1,1);
STATEV(8) = Be_2(2,2);
STATEV(9) = Be_2(3,3);
STATEV(10) = Be_2(1,2);
STATEV(11) = Be_2(1,3);
STATEV(12) = Be_2(2,3);
SIGMANEQ_2 = TAUNEQ_2 / DET;
for J=1:3
    for K=1:3
          L4NEQ_2(J,J,K,K) = (CALG_2(J,K) - PVTAU_2(J)*TWO*IDT2(J,K)) ...
                           /(PVBeTR_2(J)*PVBeTR_2(K));
    end
end
for J=1:3
    for K=1:3
        if J == K 
            continue
        end
        if (abs(PVBeTR_2(J)-PVBeTR_2(K)) < EPS)
            L4NEQ_2(J,K,J,K) = (L4NEQ_2(J,J,J,J)-L4NEQ_2(J,J,K,K))/TWO;
        else
            L4NEQ_2(J,K,J,K) = ((PVTAU_2(K)/PVBeTR_2(K))-(PVTAU_2(J)/PVBeTR_2(J))) ...
                             /(PVBeTR_2(K)-PVBeTR_2(J));
        end
          L4NEQ_2(J,K,K,J) = L4NEQ_2(J,K,J,K);
    end
end

for J=1:3
    for K=1:3
        for L=1:3
            for M=1:3 
            C4NEQ_2(J,K,L,M) = 1 * ...
            L4NEQ_2(1,1,1,1)*PVBeTR_2(1)*PVBeTR_2(1) ...
                          *PDBeTR_2(J,1)*PDBeTR_2(K,1) ...
                          *PDBeTR_2(L,1)*PDBeTR_2(M,1) ...
           +L4NEQ_2(1,1,2,2)*PVBeTR_2(1)*PVBeTR_2(2) ...
                          *PDBeTR_2(J,1)*PDBeTR_2(K,1) ...
                          *PDBeTR_2(L,2)*PDBeTR_2(M,2) ...
           +L4NEQ_2(1,1,3,3)*PVBeTR_2(1)*PVBeTR_2(3) ...
                          *PDBeTR_2(J,1)*PDBeTR_2(K,1) ...
                          *PDBeTR_2(L,3)*PDBeTR_2(M,3) ...
           +L4NEQ_2(2,2,1,1)*PVBeTR_2(2)*PVBeTR_2(1) ...
                          *PDBeTR_2(J,2)*PDBeTR_2(K,2) ...
                          *PDBeTR_2(L,1)*PDBeTR_2(M,1) ...
           +L4NEQ_2(2,2,2,2)*PVBeTR_2(2)*PVBeTR_2(2) ...
                          *PDBeTR_2(J,2)*PDBeTR_2(K,2) ...
                          *PDBeTR_2(L,2)*PDBeTR_2(M,2) ...
           +L4NEQ_2(2,2,3,3)*PVBeTR_2(2)*PVBeTR_2(3) ...
                          *PDBeTR_2(J,2)*PDBeTR_2(K,2) ...
                          *PDBeTR_2(L,3)*PDBeTR_2(M,3) ...
           +L4NEQ_2(3,3,1,1)*PVBeTR_2(3)*PVBeTR_2(1) ...
                          *PDBeTR_2(J,3)*PDBeTR_2(K,3) ...
                          *PDBeTR_2(L,1)*PDBeTR_2(M,1) ...
           +L4NEQ_2(3,3,2,2)*PVBeTR_2(3)*PVBeTR_2(2) ...
                          *PDBeTR_2(J,3)*PDBeTR_2(K,3) ...
                          *PDBeTR_2(L,2)*PDBeTR_2(M,2) ...
           +L4NEQ_2(3,3,3,3)*PVBeTR_2(3)*PVBeTR_2(3) ...
                          *PDBeTR_2(J,3)*PDBeTR_2(K,3) ...
                          *PDBeTR_2(L,3)*PDBeTR_2(M,3) ...
           +L4NEQ_2(1,2,1,2)*PVBeTR_2(1)*PVBeTR_2(2) ...
                          *PDBeTR_2(J,1)*PDBeTR_2(K,2) ...
                          *PDBeTR_2(L,1)*PDBeTR_2(M,2) ...
           +L4NEQ_2(1,2,2,1)*PVBeTR_2(1)*PVBeTR_2(2) ...
                          *PDBeTR_2(J,1)*PDBeTR_2(K,2) ...
                          *PDBeTR_2(L,2)*PDBeTR_2(M,1) ...
           +L4NEQ_2(1,3,1,3)*PVBeTR_2(1)*PVBeTR_2(3) ...
                          *PDBeTR_2(J,1)*PDBeTR_2(K,3) ...
                          *PDBeTR_2(L,1)*PDBeTR_2(M,3) ...
           +L4NEQ_2(1,3,3,1)*PVBeTR_2(1)*PVBeTR_2(3) ...
                          *PDBeTR_2(J,1)*PDBeTR_2(K,3) ...
                          *PDBeTR_2(L,3)*PDBeTR_2(M,1) ...
           +L4NEQ_2(2,1,2,1)*PVBeTR_2(2)*PVBeTR_2(1) ...
                          *PDBeTR_2(J,2)*PDBeTR_2(K,1) ...
                          *PDBeTR_2(L,2)*PDBeTR_2(M,1) ...
           +L4NEQ_2(2,1,1,2)*PVBeTR_2(2)*PVBeTR_2(1) ...
                          *PDBeTR_2(J,2)*PDBeTR_2(K,1) ...
                          *PDBeTR_2(L,1)*PDBeTR_2(M,2) ...
           +L4NEQ_2(2,3,2,3)*PVBeTR_2(2)*PVBeTR_2(3) ...
                          *PDBeTR_2(J,2)*PDBeTR_2(K,3) ...
                          *PDBeTR_2(L,2)*PDBeTR_2(M,3) ...
           +L4NEQ_2(2,3,3,2)*PVBeTR_2(2)*PVBeTR_2(3) ...
                          *PDBeTR_2(J,2)*PDBeTR_2(K,3) ...
                          *PDBeTR_2(L,3)*PDBeTR_2(M,2) ...
           +L4NEQ_2(3,1,3,1)*PVBeTR_2(3)*PVBeTR_2(1) ...
                          *PDBeTR_2(J,3)*PDBeTR_2(K,1) ...
                          *PDBeTR_2(L,3)*PDBeTR_2(M,1) ...
           +L4NEQ_2(3,1,1,3)*PVBeTR_2(3)*PVBeTR_2(1) ...
                          *PDBeTR_2(J,3)*PDBeTR_2(K,1) ...
                          *PDBeTR_2(L,1)*PDBeTR_2(M,3) ...
           +L4NEQ_2(3,2,3,2)*PVBeTR_2(3)*PVBeTR_2(2) ...
                          *PDBeTR_2(J,3)*PDBeTR_2(K,2) ...
                          *PDBeTR_2(L,3)*PDBeTR_2(M,2) ...
           +L4NEQ_2(3,2,2,3)*PVBeTR_2(3)*PVBeTR_2(2) ...
                          *PDBeTR_2(J,3)*PDBeTR_2(K,2) ...
                          *PDBeTR_2(L,2)*PDBeTR_2(M,3);
            end
        end
    end
end

for I=1:3
    for J=1:3
        for K=1:3
            for L=1:3
              C4NEQJ_2(I,J,K,L) = C4NEQ_2(I,J,K,L)/DET ...
                               +(IDT2(I,K)*TAUNEQ_2(J,L) ...
                               +IDT2(I,L)*TAUNEQ_2(J,K) ...
                               +IDT2(J,K)*TAUNEQ_2(I,L) ...
                               +IDT2(J,L)*TAUNEQ_2(I,K))/(TWO*DET); 
            end
        end
    end
end

% Third Viscous Element
BeOLDINV_3 = inv(BeOLD_3);
CiOLD_3 = transpose(DFGRD0) * BeOLDINV_3 * DFGRD0;
CiOLDINV_3 = inv(CiOLD_3);
BeTR_3 = DFGRD1 * CiOLDINV_3 * transpose(DFGRD1);
PVBeTR_3 = eig(BeTR_3);
[PDBeTR_3, ~] = eig(BeTR_3);
EPSeTR_3 = ONE/TWO * log(PVBeTR_3);
PVBe_3 = PVBeTR_3;
EPSe_3 = EPSeTR_3;

for ITER = 1:200
    Je_3 = (PVBe_3(1)*PVBe_3(2)*PVBe_3(3))^(ONE/TWO);
    PVBeBAR_3 = Je_3^(-TWO/THREE) * PVBe_3;
    DEVTAU_3(1) = MUVIS_3 * ((TWO/THREE)*(PVBeBAR_3(1)^(ALPHAVIS_3/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR_3(2)^(ALPHAVIS_3/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR_3(3)^(ALPHAVIS_3/TWO)));
    DEVTAU_3(2) = MUVIS_3 * ((TWO/THREE)*(PVBeBAR_3(2)^(ALPHAVIS_3/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR_3(3)^(ALPHAVIS_3/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR_3(1)^(ALPHAVIS_3/TWO)));
    DEVTAU_3(3) = MUVIS_3 * ((TWO/THREE)*(PVBeBAR_3(3)^(ALPHAVIS_3/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR_3(1)^(ALPHAVIS_3/TWO)) ...
                        -(ONE/THREE)*(PVBeBAR_3(2)^(ALPHAVIS_3/TWO)));
    for N = 1:3
        RESVEC_3(N) = EPSe_3(N) - EPSeTR_3(N) + DTIME(1) * (ONE/(TWO*ETADEV_3)*DEVTAU_3(N) ...
                  + KVIS_3/(SIX*ETAVOL_3)*(Je_3*Je_3-ONE));
    end
    if abs(norm(RESVEC_3)) < EPS
        break
    end
    DDEVTAUDEPSe_3(1,1) = MUVIS_3 * ALPHAVIS_3 ...
                         *((FOUR/NINE)*(PVBeBAR_3(1)^(ALPHAVIS_3/TWO))...
                           +(ONE/NINE)*(PVBeBAR_3(2)^(ALPHAVIS_3/TWO)...
                                       +PVBeBAR_3(3)^(ALPHAVIS_3/TWO))); 
    DDEVTAUDEPSe_3(2,2) = MUVIS_3 * ALPHAVIS_3  ...
                       *((FOUR/NINE)*(PVBeBAR_3(2)^(ALPHAVIS_3/TWO)) ...
                         +(ONE/NINE)*(PVBeBAR_3(3)^(ALPHAVIS_3/TWO) ...
                                     +PVBeBAR_3(1)^(ALPHAVIS_3/TWO))); 
    DDEVTAUDEPSe_3(3,3) = MUVIS_3 * ALPHAVIS_3  ...
                     *((FOUR/NINE)*(PVBeBAR_3(3)^(ALPHAVIS_3/TWO)) ...
                       +(ONE/NINE)*(PVBeBAR_3(1)^(ALPHAVIS_3/TWO) ...
                                   +PVBeBAR_3(2)^(ALPHAVIS_3/TWO)));
    DDEVTAUDEPSe_3(1,2) = MUVIS_3 * ALPHAVIS_3  ...
                     *((-TWO/NINE)*(PVBeBAR_3(1)^(ALPHAVIS_3/TWO) ...
                                   +PVBeBAR_3(2)^(ALPHAVIS_3/TWO)) ...
                       +(ONE/NINE)*(PVBeBAR_3(3)^(ALPHAVIS_3/TWO)));
    DDEVTAUDEPSe_3(1,3) = MUVIS_3 * ALPHAVIS_3  ...
                      *((-TWO/NINE)*(PVBeBAR_3(1)^(ALPHAVIS_3/TWO) ...
                                    +PVBeBAR_3(3)^(ALPHAVIS_3/TWO)) ...
                        +(ONE/NINE)*(PVBeBAR_3(2)^(ALPHAVIS_3/TWO)));
    DDEVTAUDEPSe_3(2,3) = MUVIS_3 * ALPHAVIS_3  ...
                     *((-TWO/NINE)*(PVBeBAR_3(2)^(ALPHAVIS_3/TWO) ...
                                   +PVBeBAR_3(3)^(ALPHAVIS_3/TWO)) ...
                       +(ONE/NINE)*(PVBeBAR_3(1)^(ALPHAVIS_3/TWO)));
    DDEVTAUDEPSe_3(2,1) = DDEVTAUDEPSe_3(1,2);
    DDEVTAUDEPSe_3(3,1) = DDEVTAUDEPSe_3(1,3);
    DDEVTAUDEPSe_3(3,2) = DDEVTAUDEPSe_3(2,3);
    for I = 1:3
        for J = 1:3
            KMAT_3(I,J) = IDT2(I,J) + DTIME(1) * ((ONE/(TWO*ETADEV_3))*DDEVTAUDEPSe_3(I,J) ...
                      -(ONE/(THREE*ETAVOL_3)*KVIS_3*Je_3*Je_3));
        end 
    end
    KINV_3 = inv(KMAT_3);
    DELEPSe_3 = - KINV_3 * RESVEC_3;
    EPSe_3 = EPSe_3 + DELEPSe_3;
    PVBe_3 = exp(TWO*EPSe_3);
end
for I=1:3
    for J=1:3
            Be_3(J,I)=PVBe_3(1)*PDBeTR_3(J,1)*PDBeTR_3(I,1) ...
                   +PVBe_3(2)*PDBeTR_3(J,2)*PDBeTR_3(I,2) ...
                   +PVBe_3(3)*PDBeTR_3(J,3)*PDBeTR_3(I,3);
    end 
end
PVTAU_3 = DEVTAU_3 + KVIS_3/TWO * (Je_3*Je_3-1);
PDTAU_3 = PDBeTR_3;

for I=1:3
    for J=1:3
          TAUNEQ_3(J,I)=PVTAU_3(1)*PDTAU_3(J,1)*PDTAU_3(I,1) ...
                     +PVTAU_3(2)*PDTAU_3(J,2)*PDTAU_3(I,2) ...
                     +PVTAU_3(3)*PDTAU_3(J,3)*PDTAU_3(I,3);
    end
end
DPVTAUDEPSe_3 = DDEVTAUDEPSe_3 + KVIS_3 * Je_3 * Je_3;
CALG_3 = DPVTAUDEPSe_3 * KINV_3;
STATEV(13) = Be_3(1,1);
STATEV(14) = Be_3(2,2);
STATEV(15) = Be_3(3,3);
STATEV(16) = Be_3(1,2);
STATEV(17) = Be_3(1,3);
STATEV(18) = Be_3(2,3);
SIGMANEQ_3 = TAUNEQ_3 / DET;
for J=1:3
    for K=1:3
          L4NEQ_3(J,J,K,K) = (CALG_3(J,K) - PVTAU_3(J)*TWO*IDT2(J,K)) ...
                           /(PVBeTR_3(J)*PVBeTR_3(K));
    end
end
for J=1:3
    for K=1:3
        if J == K 
            continue
        end
        if (abs(PVBeTR_3(J)-PVBeTR_3(K)) < EPS)
            L4NEQ_3(J,K,J,K) = (L4NEQ_3(J,J,J,J)-L4NEQ_3(J,J,K,K))/TWO;
        else
            L4NEQ_3(J,K,J,K) = ((PVTAU_3(K)/PVBeTR_3(K))-(PVTAU_3(J)/PVBeTR_3(J))) ...
                             /(PVBeTR_3(K)-PVBeTR_3(J));
        end
          L4NEQ_3(J,K,K,J) = L4NEQ_3(J,K,J,K);
    end
end

for J=1:3
    for K=1:3
        for L=1:3
            for M=1:3 
            C4NEQ_3(J,K,L,M) = 1 * ...
            L4NEQ_3(1,1,1,1)*PVBeTR_3(1)*PVBeTR_3(1) ...
                          *PDBeTR_3(J,1)*PDBeTR_3(K,1) ...
                          *PDBeTR_3(L,1)*PDBeTR_3(M,1) ...
           +L4NEQ_3(1,1,2,2)*PVBeTR_3(1)*PVBeTR_3(2) ...
                          *PDBeTR_3(J,1)*PDBeTR_3(K,1) ...
                          *PDBeTR_3(L,2)*PDBeTR_3(M,2) ...
           +L4NEQ_3(1,1,3,3)*PVBeTR_3(1)*PVBeTR_3(3) ...
                          *PDBeTR_3(J,1)*PDBeTR_3(K,1) ...
                          *PDBeTR_3(L,3)*PDBeTR_3(M,3) ...
           +L4NEQ_3(2,2,1,1)*PVBeTR_3(2)*PVBeTR_3(1) ...
                          *PDBeTR_3(J,2)*PDBeTR_3(K,2) ...
                          *PDBeTR_3(L,1)*PDBeTR_3(M,1) ...
           +L4NEQ_3(2,2,2,2)*PVBeTR_3(2)*PVBeTR_3(2) ...
                          *PDBeTR_3(J,2)*PDBeTR_3(K,2) ...
                          *PDBeTR_3(L,2)*PDBeTR_3(M,2) ...
           +L4NEQ_3(2,2,3,3)*PVBeTR_3(2)*PVBeTR_3(3) ...
                          *PDBeTR_3(J,2)*PDBeTR_3(K,2) ...
                          *PDBeTR_3(L,3)*PDBeTR_3(M,3) ...
           +L4NEQ_3(3,3,1,1)*PVBeTR_3(3)*PVBeTR_3(1) ...
                          *PDBeTR_3(J,3)*PDBeTR_3(K,3) ...
                          *PDBeTR_3(L,1)*PDBeTR_3(M,1) ...
           +L4NEQ_3(3,3,2,2)*PVBeTR_3(3)*PVBeTR_3(2) ...
                          *PDBeTR_3(J,3)*PDBeTR_3(K,3) ...
                          *PDBeTR_3(L,2)*PDBeTR_3(M,2) ...
           +L4NEQ_3(3,3,3,3)*PVBeTR_3(3)*PVBeTR_3(3) ...
                          *PDBeTR_3(J,3)*PDBeTR_3(K,3) ...
                          *PDBeTR_3(L,3)*PDBeTR_3(M,3) ...
           +L4NEQ_3(1,2,1,2)*PVBeTR_3(1)*PVBeTR_3(2) ...
                          *PDBeTR_3(J,1)*PDBeTR_3(K,2) ...
                          *PDBeTR_3(L,1)*PDBeTR_3(M,2) ...
           +L4NEQ_3(1,2,2,1)*PVBeTR_3(1)*PVBeTR_3(2) ...
                          *PDBeTR_3(J,1)*PDBeTR_3(K,2) ...
                          *PDBeTR_3(L,2)*PDBeTR_3(M,1) ...
           +L4NEQ_3(1,3,1,3)*PVBeTR_3(1)*PVBeTR_3(3) ...
                          *PDBeTR_3(J,1)*PDBeTR_3(K,3) ...
                          *PDBeTR_3(L,1)*PDBeTR_3(M,3) ...
           +L4NEQ_3(1,3,3,1)*PVBeTR_3(1)*PVBeTR_3(3) ...
                          *PDBeTR_3(J,1)*PDBeTR_3(K,3) ...
                          *PDBeTR_3(L,3)*PDBeTR_3(M,1) ...
           +L4NEQ_3(2,1,2,1)*PVBeTR_3(2)*PVBeTR_3(1) ...
                          *PDBeTR_3(J,2)*PDBeTR_3(K,1) ...
                          *PDBeTR_3(L,2)*PDBeTR_3(M,1) ...
           +L4NEQ_3(2,1,1,2)*PVBeTR_3(2)*PVBeTR_3(1) ...
                          *PDBeTR_3(J,2)*PDBeTR_3(K,1) ...
                          *PDBeTR_3(L,1)*PDBeTR_3(M,2) ...
           +L4NEQ_3(2,3,2,3)*PVBeTR_3(2)*PVBeTR_3(3) ...
                          *PDBeTR_3(J,2)*PDBeTR_3(K,3) ...
                          *PDBeTR_3(L,2)*PDBeTR_3(M,3) ...
           +L4NEQ_3(2,3,3,2)*PVBeTR_3(2)*PVBeTR_3(3) ...
                          *PDBeTR_3(J,2)*PDBeTR_3(K,3) ...
                          *PDBeTR_3(L,3)*PDBeTR_3(M,2) ...
           +L4NEQ_3(3,1,3,1)*PVBeTR_3(3)*PVBeTR_3(1) ...
                          *PDBeTR_3(J,3)*PDBeTR_3(K,1) ...
                          *PDBeTR_3(L,3)*PDBeTR_3(M,1) ...
           +L4NEQ_3(3,1,1,3)*PVBeTR_3(3)*PVBeTR_3(1) ...
                          *PDBeTR_3(J,3)*PDBeTR_3(K,1) ...
                          *PDBeTR_3(L,1)*PDBeTR_3(M,3) ...
           +L4NEQ_3(3,2,3,2)*PVBeTR_3(3)*PVBeTR_3(2) ...
                          *PDBeTR_3(J,3)*PDBeTR_3(K,2) ...
                          *PDBeTR_3(L,3)*PDBeTR_3(M,2) ...
           +L4NEQ_3(3,2,2,3)*PVBeTR_3(3)*PVBeTR_3(2) ...
                          *PDBeTR_3(J,3)*PDBeTR_3(K,2) ...
                          *PDBeTR_3(L,2)*PDBeTR_3(M,3);
            end
        end
    end
end

for I=1:3
    for J=1:3
        for K=1:3
            for L=1:3
              C4NEQJ_3(I,J,K,L) = C4NEQ_3(I,J,K,L)/DET ...
                               +(IDT2(I,K)*TAUNEQ_3(J,L) ...
                               +IDT2(I,L)*TAUNEQ_3(J,K) ...
                               +IDT2(J,K)*TAUNEQ_3(I,L) ...
                               +IDT2(J,L)*TAUNEQ_3(I,K))/(TWO*DET); 
            end
        end
    end
end



CNEQ(1,1) = C4NEQJ(1,1,1,1) + C4NEQJ_2(1,1,1,1) + C4NEQJ_3(1,1,1,1);
CNEQ(1,2) = C4NEQJ(1,1,2,2) + C4NEQJ_2(1,1,2,2) + C4NEQJ_3(1,1,2,2);
CNEQ(1,3) = C4NEQJ(1,1,3,3) + C4NEQJ_2(1,1,3,3) + C4NEQJ_3(1,1,3,3);
CNEQ(1,4) = C4NEQJ(1,1,1,2) + C4NEQJ_2(1,1,1,2) + C4NEQJ_3(1,1,1,2);
CNEQ(1,5) = C4NEQJ(1,1,1,3) + C4NEQJ_2(1,1,1,3) + C4NEQJ_3(1,1,1,3);
CNEQ(1,6) = C4NEQJ(1,1,2,3) + C4NEQJ_2(1,1,2,3) + C4NEQJ_3(1,1,2,3);
CNEQ(2,1) = CNEQ(1,2);
CNEQ(2,2) = C4NEQJ(2,2,2,2) + C4NEQJ_2(2,2,2,2) + C4NEQJ_3(2,2,2,2);
CNEQ(2,3) = C4NEQJ(2,2,3,3) + C4NEQJ_2(2,2,3,3) + C4NEQJ_3(2,2,3,3);
CNEQ(2,4) = C4NEQJ(2,2,1,2) + C4NEQJ_2(2,2,1,2) + C4NEQJ_3(2,2,1,2);
CNEQ(2,5) = C4NEQJ(2,2,1,3) + C4NEQJ_2(2,2,1,3) + C4NEQJ_3(2,2,1,3);
CNEQ(2,6) = C4NEQJ(2,2,2,3) + C4NEQJ_2(2,2,2,3) + C4NEQJ_3(2,2,2,3);
CNEQ(3,1) = CNEQ(1,3);
CNEQ(3,2) = CNEQ(2,3);
CNEQ(3,3) = C4NEQJ(3,3,3,3) + C4NEQJ_2(3,3,3,3) + C4NEQJ_3(3,3,3,3);
CNEQ(3,4) = C4NEQJ(3,3,1,2) + C4NEQJ_2(3,3,1,2) + C4NEQJ_3(3,3,1,2);
CNEQ(3,5) = C4NEQJ(3,3,1,3) + C4NEQJ_2(3,3,1,3) + C4NEQJ_3(3,3,1,3);
CNEQ(3,6) = C4NEQJ(3,3,2,3) + C4NEQJ_2(3,3,2,3) + C4NEQJ_3(3,3,2,3);
CNEQ(4,1) = CNEQ(1,4);
CNEQ(4,2) = CNEQ(2,4);
CNEQ(4,3) = CNEQ(3,4);
CNEQ(4,4) = C4NEQJ(1,2,1,2) + C4NEQJ_2(1,2,1,2) + C4NEQJ_3(1,2,1,2);
CNEQ(4,5) = C4NEQJ(1,2,1,3) + C4NEQJ_2(1,2,1,3) + C4NEQJ_3(1,2,1,3);
CNEQ(4,6) = C4NEQJ(1,2,2,3) + C4NEQJ_2(1,2,2,3) + C4NEQJ_3(1,2,2,3);
CNEQ(5,1) = CNEQ(1,5);
CNEQ(5,2) = CNEQ(2,5);
CNEQ(5,3) = CNEQ(3,5);
CNEQ(5,4) = CNEQ(4,5);
CNEQ(5,5) = C4NEQJ(1,3,1,3) + C4NEQJ_2(1,3,1,3) + C4NEQJ_3(1,3,1,3);
CNEQ(5,6) = C4NEQJ(1,3,2,3) + C4NEQJ_2(1,3,2,3) + C4NEQJ_3(1,3,2,3);
CNEQ(6,1) = CNEQ(1,6);
CNEQ(6,2) = CNEQ(2,6);
CNEQ(6,3) = CNEQ(3,6);
CNEQ(6,4) = CNEQ(4,6);
CNEQ(6,5) = CNEQ(5,6);
CNEQ(6,6) = C4NEQJ(2,3,2,3) + C4NEQJ_2(2,3,2,3) + C4NEQJ_3(2,3,2,3);

BTOT = DFGRD1 * transpose(DFGRD1);
PVBTOT = eig(BTOT);
[PDBTOT, ~] = eig(BTOT);
PVBBAR = DET^(-TWO/THREE)*PVBTOT;
PVTAUEQ(1) = MU * ((TWO/THREE)*(PVBBAR(1)^(ALPHA/TWO)) ...
              -  (ONE/THREE)*(PVBBAR(2)^(ALPHA/TWO)) ...
              -  (ONE/THREE)*(PVBBAR(3)^(ALPHA/TWO))) ...
              +   KELAS/TWO*(DET*DET - ONE);
PVTAUEQ(2) = MU * ((TWO/THREE)*(PVBBAR(2)^(ALPHA/TWO)) ...
              -  (ONE/THREE)*(PVBBAR(3)^(ALPHA/TWO)) ...
              -  (ONE/THREE)*(PVBBAR(1)^(ALPHA/TWO))) ...
              +   KELAS/TWO*(DET*DET - ONE);
PVTAUEQ(3) = MU * ((TWO/THREE)*(PVBBAR(3)^(ALPHA/TWO)) ...
              -  (ONE/THREE)*(PVBBAR(1)^(ALPHA/TWO)) ...
              -  (ONE/THREE)*(PVBBAR(2)^(ALPHA/TWO))) ...
              +   KELAS/TWO*(DET*DET - ONE);
for J=1:3
    for  K=1:3
        SIGMAEQ(K,J)=(PVTAUEQ(1)*PDBTOT(K,1)*PDBTOT(J,1) ...
                     +PVTAUEQ(2)*PDBTOT(K,2)*PDBTOT(J,2) ...
                     +PVTAUEQ(3)*PDBTOT(K,3)*PDBTOT(J,3))/DET;
    end 
end

CAB(1,1) = MU * ALPHA  ...
         *((FOUR/NINE)*(PVBBAR(1)^(ALPHA/TWO)) ...
           +(ONE/NINE)*(PVBBAR(2)^(ALPHA/TWO) ...
                       +PVBBAR(3)^(ALPHA/TWO))) ...
         + KELAS*DET*DET; 
CAB(2,2) = MU * ALPHA  ...
          *((FOUR/NINE)*(PVBBAR(2)^(ALPHA/TWO)) ...
            +(ONE/NINE)*(PVBBAR(3)^(ALPHA/TWO) ...
                        +PVBBAR(1)^(ALPHA/TWO))) ...
          + KELAS*DET*DET;  
CAB(3,3) = MU * ALPHA  ...
          *((FOUR/NINE)*(PVBBAR(3)^(ALPHA/TWO)) ...
            +(ONE/NINE)*(PVBBAR(1)^(ALPHA/TWO) ...
                        +PVBBAR(2)^(ALPHA/TWO))) ...
          + KELAS*DET*DET; 
CAB(1,2) = MU * ALPHA  ...
          *((-TWO/NINE)*(PVBBAR(1)^(ALPHA/TWO) ...
                        +PVBBAR(2)^(ALPHA/TWO)) ...
            +(ONE/NINE)*(PVBBAR(3)^(ALPHA/TWO))) ...
          + KELAS*DET*DET; 
CAB(1,3) = MU * ALPHA  ...
          *((-TWO/NINE)*(PVBBAR(1)^(ALPHA/TWO) ...
                        +PVBBAR(3)^(ALPHA/TWO)) ...
            +(ONE/NINE)*(PVBBAR(2)^(ALPHA/TWO))) ...
          + KELAS*DET*DET; 
CAB(2,3) = MU * ALPHA  ...
          *((-TWO/NINE)*(PVBBAR(2)^(ALPHA/TWO) ...
                        +PVBBAR(3)^(ALPHA/TWO)) ...
            +(ONE/NINE)*(PVBBAR(1)^(ALPHA/TWO))) ...
          + KELAS*DET*DET; 
CAB(2,1) = CAB(1,2);
CAB(3,1) = CAB(1,3);
CAB(3,2) = CAB(2,3);

for J=1:3
    for K=1:3
        if J==K
          GAB(J,K) = MU * ALPHA * PVBBAR(J)^(ALPHA/TWO);
        else 
            if abs(PVBTOT(J)-PVBTOT(K)) < EPS
                GAB(J,K) = MU * ALPHA ...
                          *(TWO/THREE*PVBBAR(J)^(ALPHA/TWO) ...
                           +ONE/THREE*PVBBAR(K)^(ALPHA/TWO));
            else
                GAB(J,K) = (PVTAUEQ(J)*PVBBAR(K) - PVTAUEQ(K)*PVBBAR(J)) ...
                         / (PVBBAR(J) - PVBBAR(K));     
            end
        end
    end
end

for J=1:3
    for K=1:3
        C4EQMAT(J,J,K,K) = (CAB(J,K) - TWO*PVTAUEQ(J)*IDT2(J,K))/DET;
    end
end

for J=1:3
    for K=1:3
        if J == K
            continue
        end
        C4EQMAT(J,K,J,K) = GAB(J,K) / (TWO*DET);
        C4EQMAT(J,K,K,J) = C4EQMAT(J,K,J,K); 
    end 
end

for J=1:3
 for K=1:3
   for L=1:3
     for M=1:3 
       C4EQ(J,K,L,M) = 1 * ...
        C4EQMAT(1,1,1,1) ...
           *PDBTOT(J,1)*PDBTOT(K,1) ...
           *PDBTOT(L,1)*PDBTOT(M,1) ...
       +C4EQMAT(1,1,2,2) ...
           *PDBTOT(J,1)*PDBTOT(K,1) ...
           *PDBTOT(L,2)*PDBTOT(M,2) ...
       +C4EQMAT(1,1,3,3) ...
           *PDBTOT(J,1)*PDBTOT(K,1) ...
           *PDBTOT(L,3)*PDBTOT(M,3) ...
       +C4EQMAT(2,2,1,1) ...
           *PDBTOT(J,2)*PDBTOT(K,2) ...
           *PDBTOT(L,1)*PDBTOT(M,1) ...
       +C4EQMAT(2,2,2,2) ...
           *PDBTOT(J,2)*PDBTOT(K,2) ...
           *PDBTOT(L,2)*PDBTOT(M,2) ...
       +C4EQMAT(2,2,3,3) ...
           *PDBTOT(J,2)*PDBTOT(K,2) ...
           *PDBTOT(L,3)*PDBTOT(M,3) ...
       +C4EQMAT(3,3,1,1) ...
           *PDBTOT(J,3)*PDBTOT(K,3) ...
           *PDBTOT(L,1)*PDBTOT(M,1) ...
       +C4EQMAT(3,3,2,2) ...
           *PDBTOT(J,3)*PDBTOT(K,3) ...
           *PDBTOT(L,2)*PDBTOT(M,2) ...
       +C4EQMAT(3,3,3,3) ...
           *PDBTOT(J,3)*PDBTOT(K,3) ...
           *PDBTOT(L,3)*PDBTOT(M,3) ...
       +C4EQMAT(1,2,1,2) ...
           *PDBTOT(J,1)*PDBTOT(K,2) ...
           *PDBTOT(L,1)*PDBTOT(M,2) ...
       +C4EQMAT(1,2,2,1) ...
           *PDBTOT(J,1)*PDBTOT(K,2) ...
           *PDBTOT(L,2)*PDBTOT(M,1) ...
       +C4EQMAT(1,3,1,3) ...
           *PDBTOT(J,1)*PDBTOT(K,3) ...
           *PDBTOT(L,1)*PDBTOT(M,3) ...
       +C4EQMAT(1,3,3,1) ...
           *PDBTOT(J,1)*PDBTOT(K,3) ...
           *PDBTOT(L,3)*PDBTOT(M,1) ...
       +C4EQMAT(2,1,2,1) ...
           *PDBTOT(J,2)*PDBTOT(K,1) ...
           *PDBTOT(L,2)*PDBTOT(M,1) ...
       +C4EQMAT(2,1,1,2) ...
           *PDBTOT(J,2)*PDBTOT(K,1) ...
           *PDBTOT(L,1)*PDBTOT(M,2) ...
       +C4EQMAT(2,3,2,3) ...
           *PDBTOT(J,2)*PDBTOT(K,3) ...
           *PDBTOT(L,2)*PDBTOT(M,3) ...
       +C4EQMAT(2,3,3,2) ...
           *PDBTOT(J,2)*PDBTOT(K,3) ...
           *PDBTOT(L,3)*PDBTOT(M,2) ...
       +C4EQMAT(3,1,3,1) ...
           *PDBTOT(J,3)*PDBTOT(K,1) ...
           *PDBTOT(L,3)*PDBTOT(M,1) ...
       +C4EQMAT(3,1,1,3) ...
           *PDBTOT(J,3)*PDBTOT(K,1) ...
           *PDBTOT(L,1)*PDBTOT(M,3) ...
       +C4EQMAT(3,2,3,2) ...
           *PDBTOT(J,3)*PDBTOT(K,2) ...
           *PDBTOT(L,3)*PDBTOT(M,2) ...
       +C4EQMAT(3,2,2,3) ...
           *PDBTOT(J,3)*PDBTOT(K,2) ...
           *PDBTOT(L,2)*PDBTOT(M,3);
     end
   end
 end
end

for I=1:3
    for J=1:3
      for K=1:3
        for L=1:3
          C4EQJ(I,J,K,L) = C4EQ(I,J,K,L)/DET ...
                          +(IDT2(I,K)*SIGMAEQ(J,L) ...
                           +IDT2(I,L)*SIGMAEQ(J,K) ...
                           +IDT2(J,K)*SIGMAEQ(I,L) ...
                           +IDT2(J,L)*SIGMAEQ(I,K))/(TWO);   
        end
      end
    end
end

CEQ(1,1) = C4EQJ(1,1,1,1);
CEQ(1,2) = C4EQJ(1,1,2,2);
CEQ(1,3) = C4EQJ(1,1,3,3);
CEQ(1,4) = C4EQJ(1,1,1,2);
CEQ(1,5) = C4EQJ(1,1,1,3);
CEQ(1,6) = C4EQJ(1,1,2,3);
CEQ(2,1) = CEQ(1,2);
CEQ(2,2) = C4EQJ(2,2,2,2);
CEQ(2,3) = C4EQJ(2,2,3,3);
CEQ(2,4) = C4EQJ(2,2,1,2);
CEQ(2,5) = C4EQJ(2,2,1,3);
CEQ(2,6) = C4EQJ(2,2,2,3);
CEQ(3,1) = CEQ(1,3);
CEQ(3,2) = CEQ(2,3);
CEQ(3,3) = C4EQJ(3,3,3,3);
CEQ(3,4) = C4EQJ(3,3,1,2);
CEQ(3,5) = C4EQJ(3,3,1,3);
CEQ(3,6) = C4EQJ(3,3,2,3);
CEQ(4,1) = CEQ(1,4);
CEQ(4,2) = CEQ(2,4);
CEQ(4,3) = CEQ(3,4);
CEQ(4,4) = C4EQJ(1,2,1,2);
CEQ(4,5) = C4EQJ(1,2,1,3);
CEQ(4,6) = C4EQJ(1,2,2,3);
CEQ(5,1) = CEQ(1,5);
CEQ(5,2) = CEQ(2,5);
CEQ(5,3) = CEQ(3,5);
CEQ(5,4) = CEQ(4,5);
CEQ(5,5) = C4EQJ(1,3,1,3);
CEQ(5,6) = C4EQJ(1,3,2,3);
CEQ(6,1) = CEQ(1,6);
CEQ(6,2) = CEQ(2,6);
CEQ(6,3) = CEQ(3,6);
CEQ(6,4) = CEQ(4,6);
CEQ(6,5) = CEQ(5,6);
CEQ(6,6) = C4EQJ(2,3,2,3);

STRESSTOT = SIGMAEQ +  SIGMANEQ + SIGMANEQ_2 + SIGMANEQ_3;

FIRSTPIOLA = DET * transpose(STRESSTOT) *  transpose(inv(DFGRD1));

STRESS(1) = STRESSTOT(1,1);
STRESS(2) = STRESSTOT(2,2);
STRESS(3) = STRESSTOT(3,3);
STRESS(4) = STRESSTOT(1,2);
STRESS(5) = STRESSTOT(1,3);
STRESS(6) = STRESSTOT(2,3);

DDSDDE = CNEQ + CEQ;
STATEVEND = STATEV;
end